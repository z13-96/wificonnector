version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: wifizone-postgres
    environment:
      POSTGRES_DB: wifizone
      POSTGRES_USER: wifizone_user
      POSTGRES_PASSWORD: wifizone_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wifizone-network
    restart: unless-stopped

  # Redis pour les sessions et cache
  redis:
    image: redis:7-alpine
    container_name: wifizone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wifizone-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wifizone-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://wifizone_user:wifizone_password@postgres:5432/wifizone
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
      - PORT=5000
      - MTN_MOMO_API_KEY=simulation_key
      - MOOV_MONEY_API_KEY=simulation_key
      - ORANGE_MONEY_API_KEY=simulation_key
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - wifizone-network
    restart: unless-stopped
    command: npm run dev

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wifizone-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000/api
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - wifizone-network
    restart: unless-stopped
    command: npm run dev

  # Nginx (reverse proxy pour la production)
  nginx:
    image: nginx:alpine
    container_name: wifizone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - wifizone-network
    restart: unless-stopped
    profiles:
      - production

  # pgAdmin pour gérer la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: wifizone-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@wifizone.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - wifizone-network
    restart: unless-stopped

  # Redis Commander pour gérer Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: wifizone-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - wifizone-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  wifizone-network:
    driver: bridge 